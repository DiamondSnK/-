Паттерны проектирования
=======================

Автор: Ижбулдин и Иксанов

Паттерн Снимок и Наблюдатель
------------

Текст:
Снимок — это поведенческий паттерн проектирования, который позволяет сохранять и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации. Что из этого мы можем вынести? Снимок - шаблон, который позволяет сохранять состояние (т.е. данные) объекта и восстанавливать это состояние при необходимости. Самый простой пример - комбинация Ctrl+Z. При любом изменении, предположим, текстового файла, компьютер сохраняет состояние, которое было до изменения. При нажатии Ctrl+Z он восстанавливает это состояние. Давайте теперь перейдём к проблеме: В случае создания обычного класса, в поля которого мы будем записывать текущее состояние, появится уйма проблем.
Проблемы:
•	При добавлении нового поля придётся переделывать значительную часть кода;
•	Класс может изменить состояние;
•	Мы не можем сделать поля приватными, т.к. тогда пользователь не сможет получить значение с этого поля когда это понадобится.


Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует отношение "один ко многим". В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при изменении наблюдаемого объекта автоматически происходит оповещение всех наблюдателей.
Данный паттерн еще называют Publisher-Subscriber (издатель-подписчик), поскольку отношения издателя и подписчиков характеризуют действие данного паттерна: подписчики подписываются email-рассылку определенного сайта. Сайт-издатель с помощью email-рассылки уведомляет всех подписчиков о изменениях. А подписчики получают изменения и производят определенные действия: могут зайти на сайт, могут проигнорировать уведомления и т.д.
Использование этого паттерна:
•	Когда система состоит из множества классов, объекты которых должны находиться в согласованных состояниях
•	Когда общая схема взаимодействия объектов предполагает две стороны: одна рассылает сообщения и является главным, другая получает сообщения и реагирует на них. Отделение логики обеих сторон позволяет их рассматривать независимо и использовать отдельно друга от друга.
•	Когда существует один объект, рассылающий сообщения, и множество подписчиков, которые получают сообщения. При этом точное число подписчиков заранее неизвестно и процессе работы программы может изменяться.

Пример программы паттерна Снимок:
```python
from abc import abstractmethod, ABC


class Salary(ABC):
    @abstractmethod
    def get_salary_count(self):
        """ Получить кол-во зарплаты. """
        pass

    @abstractmethod
    def set_salary_count(self):
        """ Установить новое кол-во зарплаты. """
        pass

    @abstractmethod
    def save(self):
        """ Сохранить состояние. """
        pass

    @abstractmethod
    def restore(self, memento):
        """ Восстановить состояние. """
        pass


class MementoSalary(ABC):
    """ Класс, где мы можем получить состояние для текущей итерации объекта. """

    @abstractmethod
    def get_state(self):
        """ Получить состояние. """
        pass


class VaultJobs(ABC):
    """
    Класс, который будет содержать список
    сохранённых состояний.
    """

    @abstractmethod
    def save_state(self):
        """ Сохранить состояние. """
        pass

    @abstractmethod
    def get_previous_state(self):
        """ Получить предыдущее состояние. """
        pass


class PythonVaultJobs(VaultJobs):
    """ Сохроняем список состояний для Python зарплаты. """

    def __init__(self, _jobs: Salary):
        # Список, где будут находится наши состояния
        self.__vault_jobs = []
        self._jobs = _jobs

    def save_state(self, __state: MementoSalary):
        """ Сохранить состояние. """
        self.__vault_jobs.append(__state)

    def get_previous_state(self):
        """ Получить предыдущее состояние. """
        memento = self.__vault_jobs.pop()
        self._jobs.restore(memento)

    def show_history(self) -> list:
        """ Получить список всех состояний. """
        return self.__vault_jobs


class MementoPythonSalary(MementoSalary):
    def __init__(self, _state):
        self.__state = _state

    def get_state(self):
        return self.__state

    def __repr__(self):
        return f'<Кол-во зарплаты: {self.__state} >'


class PythonSalary(Salary):
    def __init__(self):
        self._salary_count = 17000

    def get_salary_count(self) -> int:
        return self._salary_count

    def set_salary_count(self, count: int):
        """
        Установить новое кол-во зарплаты. Если кол-во < 0,
        то новое значение установленно не будет.
        """
        if abs(count) == count:
            self._salary_count = count

    def save(self) -> MementoSalary:
        return MementoPythonSalary(self._salary_count)

    def restore(self, memento: MementoSalary):
        """ Восстановить предыдущее состояние. """
        self._salary_count = memento.get_state()
        print(f'Новое кол-во зарплаты: {self._salary_count}')


feb = PythonSalary()

feb.set_salary_count(10000)

feb.set_salary_count(12000)

python_saver = PythonVaultJobs(feb)
python_saver.save_state(feb.save())

feb.set_salary_count(15000)
python_saver.save_state(feb.save())

feb.set_salary_count(20000)
python_saver.save_state(feb.save())

print(python_saver.show_history())

python_saver.get_previous_state()
python_saver.get_previous_state()

print(feb.get_salary_count())
```
-------------------------------------
Пример программы паттерна Наблюдатель:
```python
def test():
    print('Hello')
```

![](https://i1.wp.com/comhub.ru/wp-content/uploads/2019/02/img_5c751f97ac29b.png)
